package aws

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/aws/aws-sdk-go/service/ec2"
)

func (c *Client) CreateStack(name string, template string, parameters map[string]string) (string, error) {
	paramSlice := []*cloudformation.Parameter{}
	for k, v := range parameters {
		paramSlice = append(paramSlice, &cloudformation.Parameter{
			ParameterKey:   aws.String(k),
			ParameterValue: aws.String(v),
		})
	}

	out, err := c.Cloudformation.CreateStack(&cloudformation.CreateStackInput{
		StackName:  aws.String(name),
		Parameters: paramSlice,
		Tags: []*cloudformation.Tag{
			&cloudformation.Tag{
				Key:   aws.String("Name"),
				Value: aws.String(name),
			},
			&cloudformation.Tag{
				Key:   aws.String("BOSH_Classroom"),
				Value: aws.String("Autogenerated by proctor tool"),
			},
		},
		TemplateBody: aws.String(template),
	})
	if err != nil {
		return "", err
	}
	return *out.StackId, nil
}

func (c *Client) DeleteStack(nameOrID string) error {
	_, err := c.Cloudformation.DeleteStack(&cloudformation.DeleteStackInput{
		StackName: aws.String(nameOrID),
	})
	return err
}

func (c *Client) DescribeStack(nameOrID string) (string, string, map[string]string, error) {
	out, err := c.Cloudformation.DescribeStacks(&cloudformation.DescribeStacksInput{
		StackName: aws.String(nameOrID),
	})
	if err != nil {
		return "", "", nil, err
	}

	stack := *out.Stacks[0]

	parameters := map[string]string{}
	for _, parameter := range stack.Parameters {
		parameters[*parameter.ParameterKey] = *parameter.ParameterValue
	}

	status := *stack.StackStatus
	stackID := *stack.StackId
	return status, stackID, parameters, nil
}

func (c *Client) GetHostsFromStackID(stackID string) (map[string]string, error) {
	out, err := c.EC2.DescribeInstances(&ec2.DescribeInstancesInput{
		Filters: []*ec2.Filter{
			&ec2.Filter{
				Name:   aws.String("tag:aws:cloudformation:stack-id"),
				Values: []*string{aws.String(stackID)},
			},
		},
	})
	if err != nil {
		return nil, err
	}

	hosts := map[string]string{}
	for _, reservation := range out.Reservations {
		for _, instance := range reservation.Instances {
			if instance.PublicIpAddress != nil {
				hosts[*instance.PublicIpAddress] = *instance.State.Name
			}
		}
	}
	return hosts, nil
}
